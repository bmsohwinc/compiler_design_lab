/usr/lib/jvm/java-1.11.0-openjdk-amd64/bin/java -ea -Didea.test.cyclic.buffer.size=1048576 -javaagent:/opt/idea-IC-202.6948.69/lib/idea_rt.jar=43119:/opt/idea-IC-202.6948.69/bin -Dfile.encoding=UTF-8 -classpath /opt/idea-IC-202.6948.69/lib/idea_rt.jar:/opt/idea-IC-202.6948.69/plugins/junit/lib/junit5-rt.jar:/opt/idea-IC-202.6948.69/plugins/junit/lib/junit-rt.jar:/home/dell/Documents/Sem-7-Institute's/courses/CD/compiler_design_lab/lab_5_lr1_parsing/ideaway/out/production/ideaway:/home/dell/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/dell/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 com.cdlabthree.AllTests,run11
==================================

BEFORE ANY OPERATION
- - - - - - - - -

R	-->	L |
S	-->	L=R | R |
L	-->	*R | i |

==================================

--- FINAL ---
R --> [L]
S --> [L=R, R]
L --> [*R, i]
==================================

AFTER LEFT FACTORING
- - - - - - - - -

R	-->	L |
S	-->	L=R | R |
L	-->	*R | i |

==================================


>> The corrected Grammar...
R --> [L]
S --> [L=R, R]
L --> [*R, i]
==================================

AFTER REMOVING LEFT RECURSION
- - - - - - - - -

R	-->	L |
S	-->	L=R | R |
L	-->	*R | i |

==================================

THE FIRST SETS ARE:
R	-->	[i, *]
S	-->	[i, *]
L	-->	[i, *]

==================================

Seed Item: [S'|.S|$|]
>>> Closure:
	Before: [S'|.S|$|]
	After:  [R|.L|$|, L|.*R|=|, L|.*R|$|, L|.i|=|, L|.i|$|, S'|.S|$|, S|.L=R|$|, S|.R|$|]
<<<
* Checking state #0: L|.*R|$|,L|.*R|=|,L|.i|$|,L|.i|=|,R|.L|$|,S'|.S|$|,S|.L=R|$|,S|.R|$|
	Item: R|.L|$|
		... The GOTO: Before: .L and After: L.
		Added (L, [R|L.|$|]) to the nxtEleMap
	Item: L|.*R|=|
		... The GOTO: Before: .*R and After: *.R
		Added (*, [L|*.R|=|]) to the nxtEleMap
	Item: L|.*R|$|
		... The GOTO: Before: .*R and After: *.R
		Added (*, [L|*.R|=|, L|*.R|$|]) to the nxtEleMap
	Item: L|.i|=|
		... The GOTO: Before: .i and After: i.
		Added (i, [L|i.|=|]) to the nxtEleMap
	Item: L|.i|$|
		... The GOTO: Before: .i and After: i.
		Added (i, [L|i.|=|, L|i.|$|]) to the nxtEleMap
	Item: S'|.S|$|
		... The GOTO: Before: .S and After: S.
		Added (S, [S'|S.|$|]) to the nxtEleMap
	Item: S|.L=R|$|
		... The GOTO: Before: .L=R and After: L.=R
		Added (L, [S|L.=R|$|, R|L.|$|]) to the nxtEleMap
	Item: S|.R|$|
		... The GOTO: Before: .R and After: R.
		Added (R, [S|R.|$|]) to the nxtEleMap
	-- Completed grouping the Items based on nextElement
>>> Closure:
	Before: [S|R.|$|]
	After:  [S|R.|$|]
<<<
		Nxt Elem: R and Created state: S|R.|$|
			Fresh State #1 added to Queue
>>> Closure:
	Before: [S'|S.|$|]
	After:  [S'|S.|$|]
<<<
		Nxt Elem: S and Created state: S'|S.|$|
			Fresh State #2 added to Queue
>>> Closure:
	Before: [L|i.|=|, L|i.|$|]
	After:  [L|i.|=|, L|i.|$|]
<<<
		Nxt Elem: i and Created state: L|i.|$|,L|i.|=|
			Fresh State #3 added to Queue
>>> Closure:
	Before: [L|*.R|=|, L|*.R|$|]
	After:  [R|.L|=|, L|*.R|=|, L|.*R|$|, L|*.R|$|, L|.i|=|, R|.L|$|, L|.i|$|, L|.*R|=|]
<<<
		Nxt Elem: * and Created state: L|*.R|$|,L|*.R|=|,L|.*R|$|,L|.*R|=|,L|.i|$|,L|.i|=|,R|.L|$|,R|.L|=|
			Fresh State #4 added to Queue
>>> Closure:
	Before: [S|L.=R|$|, R|L.|$|]
	After:  [S|L.=R|$|, R|L.|$|]
<<<
		Nxt Elem: L and Created state: R|L.|$|,S|L.=R|$|
			Fresh State #5 added to Queue
		. Updated the topState #0:L|.*R|$|,L|.*R|=|,L|.i|$|,L|.i|=|,R|.L|$|,S'|.S|$|,S|.L=R|$|,S|.R|$| to add NextState: {R=1, S=2, i=3, *=4, L=5}
* Checking state #1: S|R.|$|
	Item: S|R.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #1:S|R.|$| to add NextState: {}
* Checking state #2: S'|S.|$|
	Item: S'|S.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #2:S'|S.|$| to add NextState: {}
* Checking state #3: L|i.|$|,L|i.|=|
	Item: L|i.|=|
	Item: L|i.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #3:L|i.|$|,L|i.|=| to add NextState: {}
* Checking state #4: L|*.R|$|,L|*.R|=|,L|.*R|$|,L|.*R|=|,L|.i|$|,L|.i|=|,R|.L|$|,R|.L|=|
	Item: R|.L|=|
		... The GOTO: Before: .L and After: L.
		Added (L, [R|L.|=|]) to the nxtEleMap
	Item: L|*.R|=|
		... The GOTO: Before: *.R and After: *R.
		Added (R, [L|*R.|=|]) to the nxtEleMap
	Item: L|.*R|$|
		... The GOTO: Before: .*R and After: *.R
		Added (*, [L|*.R|$|]) to the nxtEleMap
	Item: L|*.R|$|
		... The GOTO: Before: *.R and After: *R.
		Added (R, [L|*R.|=|, L|*R.|$|]) to the nxtEleMap
	Item: L|.i|=|
		... The GOTO: Before: .i and After: i.
		Added (i, [L|i.|=|]) to the nxtEleMap
	Item: R|.L|$|
		... The GOTO: Before: .L and After: L.
		Added (L, [R|L.|=|, R|L.|$|]) to the nxtEleMap
	Item: L|.i|$|
		... The GOTO: Before: .i and After: i.
		Added (i, [L|i.|$|, L|i.|=|]) to the nxtEleMap
	Item: L|.*R|=|
		... The GOTO: Before: .*R and After: *.R
		Added (*, [L|*.R|=|, L|*.R|$|]) to the nxtEleMap
	-- Completed grouping the Items based on nextElement
>>> Closure:
	Before: [L|*R.|=|, L|*R.|$|]
	After:  [L|*R.|=|, L|*R.|$|]
<<<
		Nxt Elem: R and Created state: L|*R.|$|,L|*R.|=|
			Fresh State #6 added to Queue
>>> Closure:
	Before: [L|i.|$|, L|i.|=|]
	After:  [L|i.|$|, L|i.|=|]
<<<
		Nxt Elem: i and Created state: L|i.|$|,L|i.|=|
			! Duplicate with state# : 3
>>> Closure:
	Before: [L|*.R|=|, L|*.R|$|]
	After:  [L|*.R|=|, R|.L|=|, L|*.R|$|, L|.*R|=|, L|.i|$|, L|.*R|$|, R|.L|$|, L|.i|=|]
<<<
		Nxt Elem: * and Created state: L|*.R|$|,L|*.R|=|,L|.*R|$|,L|.*R|=|,L|.i|$|,L|.i|=|,R|.L|$|,R|.L|=|
			! Duplicate with state# : 4
>>> Closure:
	Before: [R|L.|=|, R|L.|$|]
	After:  [R|L.|=|, R|L.|$|]
<<<
		Nxt Elem: L and Created state: R|L.|$|,R|L.|=|
			Fresh State #7 added to Queue
		. Updated the topState #4:L|*.R|$|,L|*.R|=|,L|.*R|$|,L|.*R|=|,L|.i|$|,L|.i|=|,R|.L|$|,R|.L|=| to add NextState: {R=6, i=3, *=4, L=7}
* Checking state #5: R|L.|$|,S|L.=R|$|
	Item: S|L.=R|$|
		... The GOTO: Before: L.=R and After: L=.R
		Added (=, [S|L=.R|$|]) to the nxtEleMap
	Item: R|L.|$|
	-- Completed grouping the Items based on nextElement
>>> Closure:
	Before: [S|L=.R|$|]
	After:  [L|.i|$|, R|.L|$|, L|.*R|$|, S|L=.R|$|]
<<<
		Nxt Elem: = and Created state: L|.*R|$|,L|.i|$|,R|.L|$|,S|L=.R|$|
			Fresh State #8 added to Queue
		. Updated the topState #5:R|L.|$|,S|L.=R|$| to add NextState: {==8}
* Checking state #6: L|*R.|$|,L|*R.|=|
	Item: L|*R.|=|
	Item: L|*R.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #6:L|*R.|$|,L|*R.|=| to add NextState: {}
* Checking state #7: R|L.|$|,R|L.|=|
	Item: R|L.|=|
	Item: R|L.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #7:R|L.|$|,R|L.|=| to add NextState: {}
* Checking state #8: L|.*R|$|,L|.i|$|,R|.L|$|,S|L=.R|$|
	Item: L|.i|$|
		... The GOTO: Before: .i and After: i.
		Added (i, [L|i.|$|]) to the nxtEleMap
	Item: R|.L|$|
		... The GOTO: Before: .L and After: L.
		Added (L, [R|L.|$|]) to the nxtEleMap
	Item: L|.*R|$|
		... The GOTO: Before: .*R and After: *.R
		Added (*, [L|*.R|$|]) to the nxtEleMap
	Item: S|L=.R|$|
		... The GOTO: Before: L=.R and After: L=R.
		Added (R, [S|L=R.|$|]) to the nxtEleMap
	-- Completed grouping the Items based on nextElement
>>> Closure:
	Before: [S|L=R.|$|]
	After:  [S|L=R.|$|]
<<<
		Nxt Elem: R and Created state: S|L=R.|$|
			Fresh State #9 added to Queue
>>> Closure:
	Before: [L|i.|$|]
	After:  [L|i.|$|]
<<<
		Nxt Elem: i and Created state: L|i.|$|
			Fresh State #10 added to Queue
>>> Closure:
	Before: [L|*.R|$|]
	After:  [R|.L|$|, L|.i|$|, L|*.R|$|, L|.*R|$|]
<<<
		Nxt Elem: * and Created state: L|*.R|$|,L|.*R|$|,L|.i|$|,R|.L|$|
			Fresh State #11 added to Queue
>>> Closure:
	Before: [R|L.|$|]
	After:  [R|L.|$|]
<<<
		Nxt Elem: L and Created state: R|L.|$|
			Fresh State #12 added to Queue
		. Updated the topState #8:L|.*R|$|,L|.i|$|,R|.L|$|,S|L=.R|$| to add NextState: {R=9, i=10, *=11, L=12}
* Checking state #9: S|L=R.|$|
	Item: S|L=R.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #9:S|L=R.|$| to add NextState: {}
* Checking state #10: L|i.|$|
	Item: L|i.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #10:L|i.|$| to add NextState: {}
* Checking state #11: L|*.R|$|,L|.*R|$|,L|.i|$|,R|.L|$|
	Item: R|.L|$|
		... The GOTO: Before: .L and After: L.
		Added (L, [R|L.|$|]) to the nxtEleMap
	Item: L|.i|$|
		... The GOTO: Before: .i and After: i.
		Added (i, [L|i.|$|]) to the nxtEleMap
	Item: L|*.R|$|
		... The GOTO: Before: *.R and After: *R.
		Added (R, [L|*R.|$|]) to the nxtEleMap
	Item: L|.*R|$|
		... The GOTO: Before: .*R and After: *.R
		Added (*, [L|*.R|$|]) to the nxtEleMap
	-- Completed grouping the Items based on nextElement
>>> Closure:
	Before: [L|*R.|$|]
	After:  [L|*R.|$|]
<<<
		Nxt Elem: R and Created state: L|*R.|$|
			Fresh State #13 added to Queue
>>> Closure:
	Before: [L|i.|$|]
	After:  [L|i.|$|]
<<<
		Nxt Elem: i and Created state: L|i.|$|
			! Duplicate with state# : 10
>>> Closure:
	Before: [L|*.R|$|]
	After:  [R|.L|$|, L|*.R|$|, L|.i|$|, L|.*R|$|]
<<<
		Nxt Elem: * and Created state: L|*.R|$|,L|.*R|$|,L|.i|$|,R|.L|$|
			! Duplicate with state# : 11
>>> Closure:
	Before: [R|L.|$|]
	After:  [R|L.|$|]
<<<
		Nxt Elem: L and Created state: R|L.|$|
			! Duplicate with state# : 12
		. Updated the topState #11:L|*.R|$|,L|.*R|$|,L|.i|$|,R|.L|$| to add NextState: {R=13, i=10, *=11, L=12}
* Checking state #12: R|L.|$|
	Item: R|L.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #12:R|L.|$| to add NextState: {}
* Checking state #13: L|*R.|$|
	Item: L|*R.|$|
	-- Completed grouping the Items based on nextElement
		. Updated the topState #13:L|*R.|$| to add NextState: {}

==============================================
THE DFA CONSTRUCTED:

State ID: 0
	Item #0: R -> .L | [$]
	Item #1: L -> .*R | [=]
	Item #2: L -> .*R | [$]
	Item #3: L -> .i | [=]
	Item #4: L -> .i | [$]
	Item #5: S' -> .S | [$]
	Item #6: S -> .L=R | [$]
	Item #7: S -> .R | [$]
	Next: {R=1, S=2, i=3, *=4, L=5}
	------------------------------
State ID: 1
	Item #0: S -> R. | [$]
	Next: {}
	------------------------------
State ID: 2
	Item #0: S' -> S. | [$]
	Next: {}
	------------------------------
State ID: 3
	Item #0: L -> i. | [=]
	Item #1: L -> i. | [$]
	Next: {}
	------------------------------
State ID: 4
	Item #0: R -> .L | [=]
	Item #1: L -> *.R | [=]
	Item #2: L -> .*R | [$]
	Item #3: L -> *.R | [$]
	Item #4: L -> .i | [=]
	Item #5: R -> .L | [$]
	Item #6: L -> .i | [$]
	Item #7: L -> .*R | [=]
	Next: {R=6, i=3, *=4, L=7}
	------------------------------
State ID: 5
	Item #0: S -> L.=R | [$]
	Item #1: R -> L. | [$]
	Next: {==8}
	------------------------------
State ID: 6
	Item #0: L -> *R. | [=]
	Item #1: L -> *R. | [$]
	Next: {}
	------------------------------
State ID: 7
	Item #0: R -> L. | [=]
	Item #1: R -> L. | [$]
	Next: {}
	------------------------------
State ID: 8
	Item #0: L -> .i | [$]
	Item #1: R -> .L | [$]
	Item #2: L -> .*R | [$]
	Item #3: S -> L=.R | [$]
	Next: {R=9, i=10, *=11, L=12}
	------------------------------
State ID: 9
	Item #0: S -> L=R. | [$]
	Next: {}
	------------------------------
State ID: 10
	Item #0: L -> i. | [$]
	Next: {}
	------------------------------
State ID: 11
	Item #0: R -> .L | [$]
	Item #1: L -> .i | [$]
	Item #2: L -> *.R | [$]
	Item #3: L -> .*R | [$]
	Next: {R=13, i=10, *=11, L=12}
	------------------------------
State ID: 12
	Item #0: R -> L. | [$]
	Next: {}
	------------------------------
State ID: 13
	Item #0: L -> *R. | [$]
	Next: {}
	------------------------------
==============================================

===========================================
THE PARSE TABLE

     State	         =	         *	         i	         $	         R	         S	         L
         0	         -	        S4	        S3	         -	        G1	        G2	        G5
         1	         -	         -	         -	      RS|R	         -	         -	         -
         2	         -	         -	         -	       Acc	         -	         -	         -
         3	      RL|i	         -	         -	      RL|i	         -	         -	         -
         4	         -	        S4	        S3	         -	        G6	         -	        G7
         5	        S8	         -	         -	      RR|L	         -	         -	         -
         6	     RL|*R	         -	         -	     RL|*R	         -	         -	         -
         7	      RR|L	         -	         -	      RR|L	         -	         -	         -
         8	         -	       S11	       S10	         -	        G9	         -	       G12
         9	         -	         -	         -	    RS|L=R	         -	         -	         -
        10	         -	         -	         -	      RL|i	         -	         -	         -
        11	         -	       S11	       S10	         -	       G13	         -	       G12
        12	         -	         -	         -	      RR|L	         -	         -	         -
        13	         -	         -	         -	     RL|*R	         -	         -	         -

===========================================

--------
 Input String: i=i$

                   STATE STACK	             SYMBOL STACK	       INPUT		ACTION
                           [0]	                      [$]	        i=i$		BEGIN
                        [0, 3]	                   [$, i]	         =i$		Shift: S3
                        [0, 5]	                   [$, L]	         =i$		Reduce: RL|i and Goto: G5
                     [0, 5, 8]	                [$, L, =]	          i$		Shift: S8
                 [0, 5, 8, 10]	             [$, L, =, i]	           $		Shift: S10
                 [0, 5, 8, 12]	             [$, L, =, L]	           $		Reduce: RL|i and Goto: G12
                  [0, 5, 8, 9]	             [$, L, =, R]	           $		Reduce: RR|L and Goto: G9
                        [0, 2]	                   [$, S]	           $		Reduce: RS|L=R and Goto: G2
                        [0, 2]	                   [$, S]	           $		Accept
--------
 Input String: i*i$

                   STATE STACK	             SYMBOL STACK	       INPUT		ACTION
                           [0]	                      [$]	        i*i$		BEGIN
                        [0, 3]	                   [$, i]	         *i$		Shift: S3
                        [0, 3]	                   [$, i]	         *i$		`-` Detected. REJECT
--------
 Input String: i$

                   STATE STACK	             SYMBOL STACK	       INPUT		ACTION
                           [0]	                      [$]	          i$		BEGIN
                        [0, 3]	                   [$, i]	           $		Shift: S3
                        [0, 5]	                   [$, L]	           $		Reduce: RL|i and Goto: G5
                        [0, 1]	                   [$, R]	           $		Reduce: RR|L and Goto: G1
                        [0, 2]	                   [$, S]	           $		Reduce: RS|R and Goto: G2
                        [0, 2]	                   [$, S]	           $		Accept
--------
 Input String: *i$

                   STATE STACK	             SYMBOL STACK	       INPUT		ACTION
                           [0]	                      [$]	         *i$		BEGIN
                        [0, 4]	                   [$, *]	          i$		Shift: S4
                     [0, 4, 3]	                [$, *, i]	           $		Shift: S3
                     [0, 4, 7]	                [$, *, L]	           $		Reduce: RL|i and Goto: G7
                     [0, 4, 6]	                [$, *, R]	           $		Reduce: RR|L and Goto: G6
                        [0, 5]	                   [$, L]	           $		Reduce: RL|*R and Goto: G5
                        [0, 1]	                   [$, R]	           $		Reduce: RR|L and Goto: G1
                        [0, 2]	                   [$, S]	           $		Reduce: RS|R and Goto: G2
                        [0, 2]	                   [$, S]	           $		Accept
--------
 Input String: i=*i$

                   STATE STACK	             SYMBOL STACK	       INPUT		ACTION
                           [0]	                      [$]	       i=*i$		BEGIN
                        [0, 3]	                   [$, i]	        =*i$		Shift: S3
                        [0, 5]	                   [$, L]	        =*i$		Reduce: RL|i and Goto: G5
                     [0, 5, 8]	                [$, L, =]	         *i$		Shift: S8
                 [0, 5, 8, 11]	             [$, L, =, *]	          i$		Shift: S11
             [0, 5, 8, 11, 10]	          [$, L, =, *, i]	           $		Shift: S10
             [0, 5, 8, 11, 12]	          [$, L, =, *, L]	           $		Reduce: RL|i and Goto: G12
             [0, 5, 8, 11, 13]	          [$, L, =, *, R]	           $		Reduce: RR|L and Goto: G13
                 [0, 5, 8, 12]	             [$, L, =, L]	           $		Reduce: RL|*R and Goto: G12
                  [0, 5, 8, 9]	             [$, L, =, R]	           $		Reduce: RR|L and Goto: G9
                        [0, 2]	                   [$, S]	           $		Reduce: RS|L=R and Goto: G2
                        [0, 2]	                   [$, S]	           $		Accept
--------
 Input String: i**$

                   STATE STACK	             SYMBOL STACK	       INPUT		ACTION
                           [0]	                      [$]	        i**$		BEGIN
                        [0, 3]	                   [$, i]	         **$		Shift: S3
                        [0, 3]	                   [$, i]	         **$		`-` Detected. REJECT
--------


Process finished with exit code 0
